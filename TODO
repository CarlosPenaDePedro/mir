MOVE LINES DOWN TO "DONE" AS THINGS ARE IMPLEMENTED ...

NEXT STEPS
- Caching of SH=>LL coefficients
- SH=>LL with different increments
- Bi-linear
- Nearest LSM
- Make the logging callback work in emoslib.cc
- Check why metdabuilder-test://mir-test/opensuse131/gnu/tests/fixed_tests/egrr_pl fails
- Gather knowledge about emoslib
- Merge metabuilder-test back to metabuilder-prod

PHILOSPY
- 1 Make it work
- 2 Make it correct
- 3 Make it fast

WHAT IS MISSING
- Support of polar stereographic grids (in and out)
- Nearest LSM interpolation

WHAT DOES NOT WORK
- SH to LL with different increments north/south and west/east

QUESTIONS
- Should we cache identity matrices?
- Should compute interpolate if matrix is identity?
- Should we interpolate to the reduced LL?

PRIORITY

 - MIR: create unit test framework
 - MIR: Missing values (e.g. wave field). To get a wave field: retrieve,stream=wave,param=swh,target=wave.grib

 - Find out in libemos:
    * sh to rot latlon - what is the path?
    * how 10m uv grid point - how are they interpolate, intvec?

MIR

- memory mapping of the SparseMatrix coefficients
  Store matrix in CRS
  MappedSparseMatrix<double,RowMajor> weights(nrows, ncols, nnz, row_ptr, col_ind, val);
- Field using LSM. Talk to me on how to get to the LSM data (e.g. with config, and what class do we need to implement)
- Rotated fields (code is there, needs testing)
- Rotated winds?
- Make sure we don't need to cast constness away
- Make sure cached weight files are not loaded for every field
- Wind interpolation
- Use VOD2UV from trans
- Cropping of reduced gaussian grid (https://software.ecmwf.int/wiki/pages/viewpage.action?pageId=44245985)

TESTING:
- Test mir_tool with valgrind
- Make sure we compare mir and emoslib for speed
- Make sure we run diss_requests in metabuilder with date for which the seasonal exists
-
PERFORMANCES
- Consider switching of some ASSERTions, maybe with a resource

EMOSLIB
- Find out about all intuv* functions

* Behaviour to reproduce
  - Specifying AREA on a SH field is ignored

IN ATLAS:
- Make sure cached mesh files are not loaded for every field
- refactor & code cleanup of the Grid hiearchy
- Create a Tesselation interface, with multiple implementations (Delaunay, ReducedGrid, etc)
- atlas gmsh writer must write with DataHandle
  CacheMesh should take tesselation method into account
- Speed-up mesh loading
   * use gmsh binary format + DataHandle/BufferedHandle

IN TRANS
- Check if transi can be called with a regular gaussian as output
- Get transi to print an error if memory allocation fails
- sharedmem / memmap for caching transi structures
- transi seems to be fast for coarse target resolution, e.g. T1279 => 2x2. In this case it may not be needed to cache the coefficients. We need to study what is the threseold when computing coeff is faster than loading them.

PRODGEN:
- We need to make sure prodgen does not sub-sample

MARS:
- Is intermediate_gaussian reduced?
- Implement saving of timers in json

MEMO:
- Use IFS new interpolation (SH->GG, SH->LL, new code, published paper)
- Wave will go to unstructured grid

--------------------------------------------------------------------------------------------------

DONE:
- Vo/D to U/V: Dropping one coefficient
- Implement general purpose file caching class
